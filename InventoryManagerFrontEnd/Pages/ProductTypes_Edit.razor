@page "/product-types/edit/{productTypeId}"
@inject NavigationManager _navigationManager;
@inject ITokenService _tokenService;
@inject HttpClient _http;
@inject IAPIHostUrl _apiHost;


<h3 class="mb-4">Editing @_productTypePutRequest.Name</h3>

<EditForm FormName="ProductTypeEdit" Model="_productTypePutRequest" OnValidSubmit="Submit">
    <input type="text" name="Id" value="@_productTypePutRequest.Id" hidden />
    <input type="text" name="ConcurrencyStamp" value="@_productTypePutRequest.ConcurrencyStamp" hidden />
    <div class="mb-3">
        <label class="form-label">Product type name</label>
        <InputText @bind-Value="_productTypePutRequest.Name" class="form-control"></InputText>
    </div>
    <div class="d-flex justify-content-between">
        <button type="submit" class="btn btn-primary">Submit</button>
        <button type="button" class="btn btn-danger" @onclick="DeleteConfirmationModal">Delete</button>

    </div>
</EditForm>

@if (_confirmDeletionModal)
{
    //should cover the entire screen
    <div class="modal-confirmation-background">
        
        <div class="delete-modal">
            <h3 class="mb-3">Delete "@(_productTypePutRequest.Name)" product type?</h3>
            <p>Product type contains @(_productCountModel?.Count) product(s). <br/>
                <span class="fst-italic text-warning">(Product(s) will deleted)</span>
            </p>
            
            <div class="d-flex justify-content-between">
                <button class="btn btn-success m-2" @onclick="ConfirmDeletion">Yes, please delete.</button>
                <button class="btn btn-danger m-2" @onclick="CancelDeletion">Cancel, and return.</button>

            </div>
            @if (_deletingInProcess)
            {
                <DefaultLoadingSpiner />
            }
            @if (!string.IsNullOrEmpty(_deletionResult))
            {
                <p class="text-danger">@(_deletionResult)</p>
            }
        </div>
    
    </div>
}



@code {
    //cancelation fields
    private bool _confirmDeletionModal = false;    
    private ProductCountByProductTypeId? _productCountModel = new();
    private bool _deletingInProcess = false;
    private string? _deletionResult;
    //authorized field
    private bool _signed;

    //form model
    private ProductTypePutRequest _productTypePutRequest = new();
    private ProductTypeJsonResponse? _productTypeResponse = new();

    // parameter fields
    [Parameter]
    public string? ProductTypeId { get; set; }

    private byte[]? _concurrencyStampByteArray;



    protected override async Task OnInitializedAsync()
    {
        // Check if user is signed in
        var token = await _tokenService.GetToken();
        if (token == null)
        {
            _navigationManager.NavigateTo("login");

            return;
        }
        _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);

        var response = await _http.GetAsync($"{_apiHost.GetHostUrl()}/api/ProductType/{ProductTypeId}");

        if (response.IsSuccessStatusCode)
        {
            _productTypeResponse = await response.Content.ReadFromJsonAsync<ProductTypeJsonResponse>();
            if (_productTypeResponse != null)
            {
                _productTypePutRequest.Name = _productTypeResponse.ProductType?.Name;
                _productTypePutRequest.Id = _productTypeResponse.ProductType?.Id;
                _productTypePutRequest.ConcurrencyStamp = _productTypeResponse.ProductType?.ConcurrencyStamp;

            }

        }
    }


    private async Task Submit()
    {
        var token = await _tokenService.GetToken();
        if(token == null)
        {
            _navigationManager.NavigateTo("login");
            return;
        }

        _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);

        await _http.PutAsJsonAsync<ProductTypePutRequest>($"{_apiHost.GetHostUrl()}/api/ProductType", _productTypePutRequest);
        _navigationManager.NavigateTo("product-types");
    }

    private async Task DeleteConfirmationModal()
    {
        //Get the amount of entries under the current type ID
        Console.WriteLine("Deletion Modal triggered!");

        var token = await _tokenService.GetToken();
        if(token == null)
        {
            _navigationManager.NavigateTo("login");

            return;
        }
        _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);

        _productCountModel = await _http.GetFromJsonAsync<ProductCountByProductTypeId>($"{_apiHost.GetHostUrl()}/api/Product/get-count-by-type-id?foreignId={_productTypePutRequest.Id}");

        _confirmDeletionModal = true;

    }

    /// <summary>
    /// Cancel and close the delete confirmation modal
    /// </summary>
    private void CancelDeletion()
    {
        _confirmDeletionModal = false;
    }

    /// <summary>
    /// confirm the deletion of the product type.o
    /// </summary>
    private async void ConfirmDeletion()
    {
        _deletingInProcess = true;
        var token = await _tokenService.GetToken();
        if(token == null)
        {
            _navigationManager.NavigateTo("login");
            return;
        }

        _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.AccessToken);

        var response = await _http.DeleteAsync($"{_apiHost.GetHostUrl()}/api/ProductType/{_productTypePutRequest.Id}");

        if(response.IsSuccessStatusCode)
        {
            _navigationManager.NavigateTo("product-types");
            return;
        }else
        {
            _deletingInProcess = false;
            _deletionResult = "Something went wrong when deleting. Please click on cancel top go back";

        }
    }

}
