@page "/product-types";
@inject HttpClient _http;
@inject ITokenService _tokenService;
@inject NavigationManager _navigationManager;
@inject IAPIHostUrl _apiHost;

<div class="container" style="height: 100vh">
    <h3 class="mb-4">Products types</h3>


    @if(_loading)
    {
        <DefaultLoadingSpiner />
    }else
    {
        @if (_productList != null && _productList.ProductTypes != null && _productList.ProductTypes.Any())
        {
            @foreach(var product in _productList.ProductTypes)
            {
                <div class="row border bg-light mb-2">
                    <NavLink class="nav-link p-0 col-10" href=@($"products/{product.Id}/{product.Name}")>
                        <div class="p-2 fs-5 fw-bold d-flex align-items-center ">
                                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> @product.Name
                        </div>
                    </NavLink>
                    <NavLink class="nav-link col-2 p-0 fs-3 bg-success text-white d-flex justify-content-center align-items-center" href=@($"/product-types/edit/{product.Id}")>
                        Edit
                    </NavLink>
                </div>
                <div style="position: fixed; bottom: 20px; right: 20px">
                    <button class="btn btn-primary">Create</button>
                </div>
            }

        }else
        {
            <p>There are no product types.</p>
        }
    
    }
</div>


@code {

    private bool _loading = true;
    private bool _signed;
    private ProductTypeListResponse? _productList;

    protected override async Task OnInitializedAsync()
    {
        _signed = await _tokenService.IsTokenValid();

        if(!_signed)
        {
            _navigationManager.NavigateTo("/login");
        }

        try
        {
            var tokenObject = await _tokenService.GetToken();
            if (tokenObject == null)
            {
                _navigationManager.NavigateTo("login");
                return;
            }

            _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenObject?.AccessToken);


            _productList = await _http.GetFromJsonAsync<ProductTypeListResponse>($"{_apiHost.GetHostUrl()}/api/ProductType");

            _loading = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Error while fetching]: {ex.Message}");
            _navigationManager.NavigateTo("login");
        }
    }

}
