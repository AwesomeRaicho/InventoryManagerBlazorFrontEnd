@page "/login"
@inject HttpClient _http;
@inject IAPIHostUrl _apiHost;
@inject NavigationManager _navigationManager;
@inject ITokenService _tokenService;

<h3>Login</h3>

<EditForm Model="_tokenRequest" FormName="LoginForm" OnValidSubmit="Submit">
    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="mb-3">
        <div>
            <label class="form-label">User</label>
        </div>
        <InputText @bind-Value="_tokenRequest.UserName"></InputText>
        <div>
            <ValidationMessage For="() => _tokenRequest.UserName" class="fst-italic text-danger" style="font-size: 12px;"></ValidationMessage>
        </div>
    </div>
    <div class="mb-3">
        <div >
            <label class="form-label">Password</label>
        </div>
        <InputText type="password" @bind-Value="_tokenRequest.Password"></InputText>
        <div>
            <ValidationMessage For="() => _tokenRequest.Password " class="fst-italic text-danger" style="font-size: 12px;"></ValidationMessage>
        </div>
    </div>
    <button class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private TokenRequest _tokenRequest = new();
    private TokenResponse? _tokenResponse;


    private async Task Submit()
    {
        try
        {
            var response = await _http.PostAsJsonAsync<TokenRequest>($"{_apiHost.GetHostUrl()}/api/Auth/login ", _tokenRequest);

            var mappedTokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();

            if (mappedTokenResponse != null)
            {
                await _tokenService.SetToken(mappedTokenResponse);
                _navigationManager.NavigateTo("/");
                return;
            }
            else
            {
                Console.WriteLine($"API returned Null.");
            }


        }catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }


}
